// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: config_schema.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigSchemaServiceClient is the client API for ConfigSchemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigSchemaServiceClient interface {
	SaveConfigSchema(ctx context.Context, in *SaveConfigSchemaRequest, opts ...grpc.CallOption) (*SaveConfigSchemaResponse, error)
	GetConfigSchema(ctx context.Context, in *GetConfigSchemaRequest, opts ...grpc.CallOption) (*GetConfigSchemaResponse, error)
	DeleteConfigSchema(ctx context.Context, in *DeleteConfigSchemaRequest, opts ...grpc.CallOption) (*DeleteConfigSchemaResponse, error)
	ValidateConfiguration(ctx context.Context, in *ValidateConfigurationRequest, opts ...grpc.CallOption) (*ValidateConfigurationResponse, error)
	GetConfigSchemaVersions(ctx context.Context, in *ConfigSchemaVersionsRequest, opts ...grpc.CallOption) (*ConfigSchemaVersionsResponse, error)
}

type configSchemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigSchemaServiceClient(cc grpc.ClientConnInterface) ConfigSchemaServiceClient {
	return &configSchemaServiceClient{cc}
}

func (c *configSchemaServiceClient) SaveConfigSchema(ctx context.Context, in *SaveConfigSchemaRequest, opts ...grpc.CallOption) (*SaveConfigSchemaResponse, error) {
	out := new(SaveConfigSchemaResponse)
	err := c.cc.Invoke(ctx, "/configschema.ConfigSchemaService/SaveConfigSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSchemaServiceClient) GetConfigSchema(ctx context.Context, in *GetConfigSchemaRequest, opts ...grpc.CallOption) (*GetConfigSchemaResponse, error) {
	out := new(GetConfigSchemaResponse)
	err := c.cc.Invoke(ctx, "/configschema.ConfigSchemaService/GetConfigSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSchemaServiceClient) DeleteConfigSchema(ctx context.Context, in *DeleteConfigSchemaRequest, opts ...grpc.CallOption) (*DeleteConfigSchemaResponse, error) {
	out := new(DeleteConfigSchemaResponse)
	err := c.cc.Invoke(ctx, "/configschema.ConfigSchemaService/DeleteConfigSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSchemaServiceClient) ValidateConfiguration(ctx context.Context, in *ValidateConfigurationRequest, opts ...grpc.CallOption) (*ValidateConfigurationResponse, error) {
	out := new(ValidateConfigurationResponse)
	err := c.cc.Invoke(ctx, "/configschema.ConfigSchemaService/ValidateConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSchemaServiceClient) GetConfigSchemaVersions(ctx context.Context, in *ConfigSchemaVersionsRequest, opts ...grpc.CallOption) (*ConfigSchemaVersionsResponse, error) {
	out := new(ConfigSchemaVersionsResponse)
	err := c.cc.Invoke(ctx, "/configschema.ConfigSchemaService/GetConfigSchemaVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSchemaServiceServer is the server API for ConfigSchemaService service.
// All implementations must embed UnimplementedConfigSchemaServiceServer
// for forward compatibility
type ConfigSchemaServiceServer interface {
	SaveConfigSchema(context.Context, *SaveConfigSchemaRequest) (*SaveConfigSchemaResponse, error)
	GetConfigSchema(context.Context, *GetConfigSchemaRequest) (*GetConfigSchemaResponse, error)
	DeleteConfigSchema(context.Context, *DeleteConfigSchemaRequest) (*DeleteConfigSchemaResponse, error)
	ValidateConfiguration(context.Context, *ValidateConfigurationRequest) (*ValidateConfigurationResponse, error)
	GetConfigSchemaVersions(context.Context, *ConfigSchemaVersionsRequest) (*ConfigSchemaVersionsResponse, error)
	mustEmbedUnimplementedConfigSchemaServiceServer()
}

// UnimplementedConfigSchemaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigSchemaServiceServer struct {
}

func (UnimplementedConfigSchemaServiceServer) SaveConfigSchema(context.Context, *SaveConfigSchemaRequest) (*SaveConfigSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfigSchema not implemented")
}
func (UnimplementedConfigSchemaServiceServer) GetConfigSchema(context.Context, *GetConfigSchemaRequest) (*GetConfigSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigSchema not implemented")
}
func (UnimplementedConfigSchemaServiceServer) DeleteConfigSchema(context.Context, *DeleteConfigSchemaRequest) (*DeleteConfigSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigSchema not implemented")
}
func (UnimplementedConfigSchemaServiceServer) ValidateConfiguration(context.Context, *ValidateConfigurationRequest) (*ValidateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfiguration not implemented")
}
func (UnimplementedConfigSchemaServiceServer) GetConfigSchemaVersions(context.Context, *ConfigSchemaVersionsRequest) (*ConfigSchemaVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigSchemaVersions not implemented")
}
func (UnimplementedConfigSchemaServiceServer) mustEmbedUnimplementedConfigSchemaServiceServer() {}

// UnsafeConfigSchemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigSchemaServiceServer will
// result in compilation errors.
type UnsafeConfigSchemaServiceServer interface {
	mustEmbedUnimplementedConfigSchemaServiceServer()
}

func RegisterConfigSchemaServiceServer(s grpc.ServiceRegistrar, srv ConfigSchemaServiceServer) {
	s.RegisterService(&ConfigSchemaService_ServiceDesc, srv)
}

func _ConfigSchemaService_SaveConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSchemaServiceServer).SaveConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configschema.ConfigSchemaService/SaveConfigSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSchemaServiceServer).SaveConfigSchema(ctx, req.(*SaveConfigSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSchemaService_GetConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSchemaServiceServer).GetConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configschema.ConfigSchemaService/GetConfigSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSchemaServiceServer).GetConfigSchema(ctx, req.(*GetConfigSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSchemaService_DeleteConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSchemaServiceServer).DeleteConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configschema.ConfigSchemaService/DeleteConfigSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSchemaServiceServer).DeleteConfigSchema(ctx, req.(*DeleteConfigSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSchemaService_ValidateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSchemaServiceServer).ValidateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configschema.ConfigSchemaService/ValidateConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSchemaServiceServer).ValidateConfiguration(ctx, req.(*ValidateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSchemaService_GetConfigSchemaVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSchemaVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSchemaServiceServer).GetConfigSchemaVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configschema.ConfigSchemaService/GetConfigSchemaVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSchemaServiceServer).GetConfigSchemaVersions(ctx, req.(*ConfigSchemaVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigSchemaService_ServiceDesc is the grpc.ServiceDesc for ConfigSchemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigSchemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configschema.ConfigSchemaService",
	HandlerType: (*ConfigSchemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveConfigSchema",
			Handler:    _ConfigSchemaService_SaveConfigSchema_Handler,
		},
		{
			MethodName: "GetConfigSchema",
			Handler:    _ConfigSchemaService_GetConfigSchema_Handler,
		},
		{
			MethodName: "DeleteConfigSchema",
			Handler:    _ConfigSchemaService_DeleteConfigSchema_Handler,
		},
		{
			MethodName: "ValidateConfiguration",
			Handler:    _ConfigSchemaService_ValidateConfiguration_Handler,
		},
		{
			MethodName: "GetConfigSchemaVersions",
			Handler:    _ConfigSchemaService_GetConfigSchemaVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_schema.proto",
}
